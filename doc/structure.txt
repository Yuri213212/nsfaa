	func f(){
		statement;
	}

:F {
	statement
RET }

----------------

	if (expression){//ifnz
		statement
	}

{ expression BNZ #3 JMP &_ENDIF
	statement
:_ENDIF }

----------------

	if (expression){
		statement1;
	}else{
		statement2;
	}

{ expression BNZ #3 { JMP &_ELSE
	statement1
JMP &_ENDIF :_ELSE }
	statement2
:_ENDIF }

----------------

	if (expression1){
		statement1;
	}else if (expression2){
		statement2;
	}else{
		statement3;
	}

{ expression1 BNZ #3 { JMP &_ELSE
	statement1
JMP &_ENDIF :_ELSE } expression2 BNZ #3 { JMP &_ELSE
	statement2
JMP &_ENDIF :_ELSE }
	statement3
:_ENDIF }

----------------

	switch (expression){
	default:
		statement0;
	case 1:
		statement1;
	case 2:
		statement2;
	}

{ expression CMPI #1 BNE #3 JMP &_CASE1 CMPI #2 BNE #3 JMP &_CASE2
;default
	statement0
:_CASE1
	statement1
:_CASE2
	statement2
:_BRK }

----------------

	switch (expression){
	case 1:
		statement1;
	case 2:
		statement2;
	default:
		statement0;
	}

{ expression CMPI #1 BNE #3 JMP &_CASE1 CMPI #2 BNE #3 JMP &_CASE2 JMP &_DEF
:_CASE1
	statement1
:_CASE2
	statement2
:_DEF
	statement0
:_BRK }

----------------

	for (expression1;expression2;expression3){
		statement;
	}

{ expression1 :_LOOP expression2 BNZ #3 JMP &_BRK
	statement
:_CON expression3 JMP &_LOOP :_BRK }

----------------

	while (expression){
		statement;
	}

{ :_CON expression BNZ #3 JMP &_BRK
	statement
JMP &_CON :_BRK }

----------------

	do{
		statement;
	}while (expression);

{ :_LOOP
	statement
:_CON expression BZE #3 JMP &_LOOP :_BRK }
