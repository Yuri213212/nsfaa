[AdvancedAssembler的历史]
·前身
　　大学时期有一门实验课，内容是用VHDL设计CPU并将使用该CPU的单片机系统烧到FPGA里执行。
　　由于是自己设计的CPU所以不存在配套编译/汇编器，于是当时为了自动计算标签写了一个非常简单的类汇编器。
　　由于主要目的是计算标签，所以内容只需要分成3部分：数据、标签定义和标签内容。
　　当时设计的是8位机，于是很简单的方法便是：0x00~0xFF为数据，负数是标签定义，大于0xFF是对应相反数标签的内容。
　　例如：-100 92 01 61 100
　　假设命令0x92意味着SUB，0x61意味着JNE，那么该行表示while (--A);

·AdvancedAssembler语言的设计
　　由于纯数字的类汇编语言不查命令表不可读，而且很容易写错，因此需要命令名标签名之类的字符串处理。
　　由于大学时期的汇编语言课我是先写类C语言代码再人工编译，因此需要一个类似汇编但是支持把命令写成一长串来和C语言行单位地一一对应的语言。
　　根据以上两点，设计了AdvancedAssembler语言格式。
　　首先需要确定如何读取数据（字符串还是数值），因此想到在内容前加入控制字符表达不同的意义。
　　其次，数值数据有变长的可能性（char型short型还是int型），于是在控制字符前加长度信息。
　　后来，鉴于书写循环等可嵌套结构时产生标签冲突的问题设计了局部标签机制。
　　而且加入了相对标签计算以及文件导入等方便的功能。

[编程指导]
·关于命令名与标签名
　　根据历史，AdvancedAssembler兼容纯数字的形式，意味着上面那个例子可以将内容原封不动地转写成下面形式：
　　:100 $92 $01 $61 &100
　　当然为了方便阅读，建议写成以下形式（此例为假想的实验课的CPU命令，nsfaa不能编译）：
　　:_LOOP SUB $01 JNE &_LOOP
　　对于没有必要收录的非官方命令（重复的命令），仍然可以使用上面的原始方法调用。

·关于同名命令
　　命令集里面定义了一些同名命令，比如LD对应$A5和$AD，不至于混乱的原因是重载功能。
　　命令名后的第一个数据视为该命令的运算数（如果该命令需要运算数），根据运算数的长度自动选择用哪个机器码。

·关于数值与标签的关系
　　上面一直在说标签自动计算的问题，如果不自动计算会发生什么呢？
　　假设其他地方以“@1234 :L”定义了标签L，那么LD &L在编译后将变成AD 34 12。
　　2$1234变成$34 $12是因为little endian，也就意味着在L=0x1234的时候LD &L可以写成以下的任何一种形式（其中第一种为推荐写法）：
　　　·LD &L
　　　·LD 2$1234
　　　·$AD &L
　　　·$AD 2$1234
　　　·$AD $34 $12
　　注意：
　　　·LD $34 $12不对，虽然编译不会出错但是LD的意义变了，运算数被视为1字节，编译结果将变成A5 34 12。
　　　　也就是说，无论您写什么，请注意您在直接写ROM数据，nsfaa不会检测程序的合理性。
　　　·以上有个隐含的前提是默认数值长度是1，此时表示双字节数值前面的2不能省略，如果写$1234不会报错，但是编译器会自动截断数据为$34。
　　　　反过来，假设默认数值长度是2，那么表示单字节数值前面的1不能省略，如果写成$12将被填零而等价于2$0012，也就是输出12 00。

·关于标签的特殊用法
　　由于呼叫标签的本质是向ROM写入标签内容，于是可以把标签当成数值的别名。
　　　以此技巧定义标签时必然需要配合指定地址（@命令）丢失当前位置信息，若不想破坏数据流，需要在这之前定义一个标签保存地址，之后用~命令恢复地址。
　　　顺便说一句，使用~命令恢复地址不但可以定义别名，而且可以覆盖以定义的常量数据，使先定义的数据为weak。
　　比如写@1234 :L有将L定义为0x1234的意义，只不过使用时不像C语言的宏那样直接替换，而是需要呼叫标签的命令。
　　例：LD %L（注意这里我写的不是LAD，这俩虽然机器码一样但是含义不一样）的意义是读取以标签形式定义的宏L的低字节内容——0x34。

·关于局部标签
　　局部标签本意是为了嵌套结构复制粘贴方便，如果滥用将造成严重的混乱。
　　·正常使用例（嵌套循环）：
	@8000
	{ :_LOOP		;_LOOP(lv1)=0x8000
		@8010
		{ :_LOOP	;_LOOP(lv2)=0x8010
			@8020
		JMP &_LOOP}	;0x8010=_LOOP(lv2)
	JMP &_LOOP}		;0x8000=_LOOP(lv1)
　　　其等价于将内外层标签_LOOP重命名成不同的标签。
　　　此例对应的用法是复制粘贴C_Structure.txt中的可嵌套结构，复制后只需要调节缩进，无须修改标签名。
　　·混乱的例子（我也不知道我写的有什么意义）：
	@8000
	:L1 {			;L1(lv0)=0x8000
		&L1		;0x8010=L1(lv1)
		&L2		;0x8030=L2(lv0)
		@8010
		:L1 {		;L1(lv1)=0x8010
			&L2	;0x8020=L2(lv2)
			@8020
			:L2	;L2(lv2)=0x8020
		}
	}
	@8030
	:L2			;L2(lv0)=0x8030
　　注意标签的级别。

·关于相对地址
　　命令集里面的条件分支命令（BZE、BNZ等）需要单字节的相对地址。
　　若分支只跳过单个命令的时候建议不加标签直接写数值，该值为本分支命令的运算数后到分支后第一个命令前的字节数。
　　　例1：if (A) return;写成BZE #1 RET。
　　　例2：if (A) goto l;写成BZE #3 JMP &L，这里假设标签l距离这里很远。
　　说到“很远”，由于相对地址只有1字节，能表示的范围只有-128~127，超出了则不能表示，编译时会报错。
　　因此标签的相对地址定义为感叹号命令，意思是提醒您注意数值范围，如果超出则只能改变写法。
　　C_Structure.txt中对应带分支命令的结构都有两组写法，第一种是近版使用相对地址，第二种是远版只使用绝对地址。
　　　在近版能用时使用后者将浪费时间与空间，人工编译的时候最好避免。
　　　两种版本的区别主要是把BZE !L换成BNZ #3 JMP &L，注意条件相反，前者是0时直接分支，后者是非零时分支来无视跳转。

·关于文件导入与相对路径
　　有些代码如寄存器定义需要每个工程都写一遍，如果每次都复制的话占地方不方便阅读，并且一旦发现寄存器定义有误（注释方面）的时候改起来非常麻烦。
　　因此编译器加入了\include和\import两个宏，用于展开代码和导入数据。
　　文件路径可以使用相对路径，第一个字符为.是当前文件所在文件夹，第一个字符为?是编译器所在文件夹。
　　·\include ./*.*对应#include "*.*"
　　·\include ?/*.*对应#include <*.*>
