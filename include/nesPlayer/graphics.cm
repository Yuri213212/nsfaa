#define spattributewhite	0x00
#define spattributeblack	0x01
#define spattributeled		0x02

#define colorblack		0x2F	//black
#define colorwhite		0x30	//white
#define colorblackkeyoff	0x2F	//black
#define colorgreenled		0x29	//ygreen
#define colornotplaying		0x00	//gray
#define colorplaying		0x25	//pred
#define colordpcmkeyoff		0x00	//gray
#define colordpcmkeyon		0x2B	//cgreen
#define colornoisekeyoff	0x00	//gray
#define colornoisekeyon		0x21	//cblue
#define colorwhitekeyon		0x2A	//green
#define colorblackkeyon		0x2A	//green
#define colorredled		0x26	//orange

#define basekey			72
#define keyoff			0xC7

#define staticstart		0x2020
#define dynamictranspose	0x213A
#define dynamictempo		0x2166
#define dynamicspeed		0x2176
#define dynamicnextsong		0x21A0
#define dynamicsong		0x21A9
#define dynamicrow		0x21B0
#define dynamicmaxrow		0x21BC

//@D0
var1 transpose,tempo0,tempo1,tempo2,tempo3,tempo4,speed0,speed1;
var1 song0,song1,rownum0,rownum1,maxrow0,maxrow1,maxrow2,maxrow3;
//@E0
var1 nextsong,keyi,temp;
var1 noisestate,keytri,keyrec1,keyrec2;
var1 keyfx1,keyfx2,keyfx3,keyfx4,keyfx5,keyfx6,keyfx7,keyfx8;

override const1 initoambuffer[256]={
	0xFF,0xFF,0x00,0xFF,0xFF,spcharbottom,0x00,0xFF,
	0xFF,0xFF,0x00,0xFF,0xFF,spcharbottom,0x00,0xFF,
	0xFF,0xFF,0x00,0xFF,0xFF,spcharbottom,0x00,0xFF,
	0xFF,0xFF,0x00,0xFF,0xFF,spcharbottom,0x00,0xFF,
	0xFF,0xFF,0x00,0xFF,0xFF,spcharbottom,0x00,0xFF,
	0xFF,0xFF,0x00,0xFF,0xFF,spcharbottom,0x00,0xFF,
	0xFF,0xFF,0x00,0xFF,0xFF,spcharbottom,0x00,0xFF,
	0xFF,0xFF,0x00,0xFF,0xFF,spcharbottom,0x00,0xFF,
	0xFF,0xFF,0x00,0xFF,0xFF,spcharbottom,0x00,0xFF,
	0xFF,0xFF,0x00,0xFF,0xFF,spcharbottom,0x00,0xFF,
	0xFF,0xFF,0x00,0xFF,0xFF,spcharbottom,0x00,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xBF,spcharled,0x00,0xFF,
};

override const1 keyspy0[144]={
	0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,
	0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,
	0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,
	0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,0xC7,
	0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,
	0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,
	0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,
	0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,
	0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,
	0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,
	0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,
	0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77,
};
override const1 keyspy1[144]{
	0xD7,0xFF,0xD7,0xFF,0xD7,0xD7,0xFF,0xD7,0xFF,0xD7,0xFF,0xD7,
	0xD7,0xFF,0xD7,0xFF,0xD7,0xD7,0xFF,0xD7,0xFF,0xD7,0xFF,0xD7,
	0xD7,0xFF,0xD7,0xFF,0xD7,0xD7,0xFF,0xD7,0xFF,0xD7,0xFF,0xD7,
	0xD7,0xFF,0xD7,0xFF,0xD7,0xD7,0xFF,0xD7,0xFF,0xD7,0xFF,0xD7,
	0xAF,0xFF,0xAF,0xFF,0xAF,0xAF,0xFF,0xAF,0xFF,0xAF,0xFF,0xAF,
	0xAF,0xFF,0xAF,0xFF,0xAF,0xAF,0xFF,0xAF,0xFF,0xAF,0xFF,0xAF,
	0xAF,0xFF,0xAF,0xFF,0xAF,0xAF,0xFF,0xAF,0xFF,0xAF,0xFF,0xAF,
	0xAF,0xFF,0xAF,0xFF,0xAF,0xAF,0xFF,0xAF,0xFF,0xAF,0xFF,0xAF,
	0x87,0xFF,0x87,0xFF,0x87,0x87,0xFF,0x87,0xFF,0x87,0xFF,0x87,
	0x87,0xFF,0x87,0xFF,0x87,0x87,0xFF,0x87,0xFF,0x87,0xFF,0x87,
	0x87,0xFF,0x87,0xFF,0x87,0x87,0xFF,0x87,0xFF,0x87,0xFF,0x87,
	0x87,0xFF,0x87,0xFF,0x87,0x87,0xFF,0x87,0xFF,0x87,0xFF,0x87,
};
override const1 keyspchar0[144]{
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
	spcharleft,spcharblack,spcharmiddle,spcharblack,spcharright,spcharleft,spcharblack,spcharmiddle,spcharblack,spcharmiddle,spcharblack,spcharright,
};
override const1 keyspx[144]{
	0x10,0x14,0x18,0x1C,0x20,0x28,0x2C,0x30,0x34,0x38,0x3C,0x40,
	0x48,0x4C,0x50,0x54,0x58,0x60,0x64,0x68,0x6C,0x70,0x74,0x78,
	0x80,0x84,0x88,0x8C,0x90,0x98,0x9C,0xA0,0xA4,0xA8,0xAC,0xB0,
	0xB8,0xBC,0xC0,0xC4,0xC8,0xD0,0xD4,0xD8,0xDC,0xE0,0xE4,0xE8,
	0x10,0x14,0x18,0x1C,0x20,0x28,0x2C,0x30,0x34,0x38,0x3C,0x40,
	0x48,0x4C,0x50,0x54,0x58,0x60,0x64,0x68,0x6C,0x70,0x74,0x78,
	0x80,0x84,0x88,0x8C,0x90,0x98,0x9C,0xA0,0xA4,0xA8,0xAC,0xB0,
	0xB8,0xBC,0xC0,0xC4,0xC8,0xD0,0xD4,0xD8,0xDC,0xE0,0xE4,0xE8,
	0x10,0x14,0x18,0x1C,0x20,0x28,0x2C,0x30,0x34,0x38,0x3C,0x40,
	0x48,0x4C,0x50,0x54,0x58,0x60,0x64,0x68,0x6C,0x70,0x74,0x78,
	0x80,0x84,0x88,0x8C,0x90,0x98,0x9C,0xA0,0xA4,0xA8,0xAC,0xB0,
	0xB8,0xBC,0xC0,0xC4,0xC8,0xD0,0xD4,0xD8,0xDC,0xE0,0xE4,0xE8,
};

override const1 bgattribute[64]={
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x30,0x00,0x00,0x00,0x05,0x08,0x0A,0xCA,
	0x33,0x00,0x00,0x00,0x00,0x00,0x00,0xCC,
	0x33,0x00,0x00,0x00,0x00,0x00,0x00,0xCC,
	0x33,0x00,0x00,0x00,0x00,0x00,0x00,0xCC,
	0x33,0x00,0x00,0x00,0x00,0x00,0x00,0xCC,
};

override const1 msgkb0[32]={
	bgcharup1,bgcharup0,
	bgcharleft0,bgcharmiddle0,bgcharright0,bgcharleft0,bgcharmiddle0,bgcharmiddle0,bgcharright0,
	bgcharleft0,bgcharmiddle0,bgcharright0,bgcharleft0,bgcharmiddle0,bgcharmiddle0,bgcharright0,
	bgcharleft0,bgcharmiddle0,bgcharright0,bgcharleft0,bgcharmiddle0,bgcharmiddle0,bgcharright0,
	bgcharleft0,bgcharmiddle0,bgcharright0,bgcharleft0,bgcharmiddle0,bgcharmiddle0,bgcharright0,
	bgcharup0,bgcharup1,
};
override const1 msgkb1[32]={
	bgcharcenter1,bgcharcenter0,
	bgcharleft1,bgcharmiddle1,bgcharright1,bgcharleft1,bgcharmiddle1,bgcharmiddle1,bgcharright1,
	bgcharleft1,bgcharmiddle1,bgcharright1,bgcharleft1,bgcharmiddle1,bgcharmiddle1,bgcharright1,
	bgcharleft1,bgcharmiddle1,bgcharright1,bgcharleft1,bgcharmiddle1,bgcharmiddle1,bgcharright1,
	bgcharleft1,bgcharmiddle1,bgcharright1,bgcharleft1,bgcharmiddle1,bgcharmiddle1,bgcharright1,
	bgcharcenter0,bgcharcenter1,
};
override const1 msgkb2[32]={
	bgcharcenter1,bgcharcenter0,
	bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,
	bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,
	bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,
	bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,
	bgcharcenter0,bgcharcenter1,
};
override const1 msgkb3[32]={
	bgchardown1,bgchardown0,
	bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,
	bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,
	bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,
	bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,bgcharbottom,
	bgchardown0,bgchardown1,
};
override const1 msgled[32]={
	' ',' ',
	' ',' ',' ',' ',' ',' ',' ',
	' ',' ',' ',' ',' ',' ',' ',
	bgcharled,' ',' ',' ',' ',' ',' ',
	' ',' ',' ',' ',' ',' ',' ',
	' ',' ',
};
override const1 msgunderline[32]={
	' ',' ',' ',' ',' ',' ',' ',' ',
	bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,
	bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,
	bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,bgcharunderline,
};

override const1 msgtitle[32]={
	"  Title:",
	"        ",
	"        ",
	"        ",
};
override const1 msgartist[32]={
	" Artist:",
	"        ",
	"        ",
	"        ",
};
override const1 msgversion[32]={
	"Version:",
	"        ",
	"        ",
	"        ",
};
override const1 msgcomment[32]={
	"Comment:",
	"        ",
	"        ",
	"        ",
};
override const1 msgtuning[32]={
	"                ",
	"Transpose=      ",
};
override const1 msgtempo[32]={
	"Tempo=450.00bpm ",
	"Speed= 8x       ",
};
override const1 msgsong[32]={
	"00",' ',' ',"Song:--",' ',' ',' ',' ',' ',
	"FFFF",' ',' ',' ',"0000-????",
};

override const1 hex2c[16]="0123456789ABCDEF";//#no nul
override const1 dec2c1[16]="          111111";//#no nul
override const1 dec2c0[16]="0123456789012345";//#no nul

g_initmem(){
	nextsong=0x00;			//init memory
	keyi=0x00;
	transpose=0x00;
	tempo0='4';
	tempo1='5';
	tempo2='0';
	tempo3='0';
	tempo4='0';
	speed0=' ';
	speed1='8';
	song0='-';
	song1='-';
	rownum0=0xFF;
	rownum1=0xFF;
	maxrow0='?';
	maxrow1='?';
	maxrow2='?';
	maxrow3='?';
	X=0x00;
	do{				//init OAM buffer
		oambuffer[X]=initoambuffer[X];
	}while (++X);
	sp63x=keyspx[basekey];
	n163PbankAB=0x00;		//init chr banks
	n163Cbank00=0x00;
	n163Cbank04=0x01;
	n163Cbank08=0x02;
	n163Cbank0C=0x03;
	n163Cbank10=0x04;
	n163Cbank20=0xFE;
}

g_initppu(){
	ppuaddr=name0;			//clear screen
	A=0x00;
	for (Y=32;Y;--Y){
		for (X=32;X;--X){
			ppudata=0x00;//A
		}
	}
	ppuaddr=paletteBG;		//set BG palette
	ppudata=colorblack;
	ppudata=colorwhite,colorblackkeyoff,colorgreenled;
	ppuaddr=paletteBG1;
	ppudata=colorgreenled;
	ppuaddr=paletteBG2;
	ppudata=colornotplaying;
	ppuaddr=paletteBG3;
	ppudata=colordpcmkeyoff,colornoisekeyoff;
	ppuaddr=paletteSP0;		//set SP palette
	ppudata=colorwhitekeyon,colorblackkeyon,colorredled;//green,dkgreen,orange
	ppuaddr=attribute0;		//set attribute
	for (X=0;X<64;++X){
		ppudata=bgattribute[X];
	}
	ppuaddr=staticstart;		//print static contents
	for (X=0;X<32;++X){
		ppudata=msgtitle[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgunderline[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgartist[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgunderline[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgversion[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgunderline[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgcomment[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgunderline[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgtuning[X];
	}
	for (X=0;X<32;++X){
		ppudata=' ';
	}
	for (X=0;X<32;++X){
		ppudata=msgtempo[X];
	}
	for (X=0;X<32;++X){
		ppudata=' ';
	}
	for (X=0;X<32;++X){
		ppudata=msgsong[X];
	}
	for (X=0;X<32;++X){
		ppudata=' ';
	}
	for (X=0;X<32;++X){
		ppudata=msgkb0[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgkb1[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgkb2[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgkb3[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgled[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgkb0[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgkb1[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgkb2[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgkb3[X];
	}
	for (X=0;X<32;++X){
		ppudata=' ';
	}
	for (X=0;X<32;++X){
		ppudata=msgkb0[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgkb1[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgkb2[X];
	}
	for (X=0;X<32;++X){
		ppudata=msgkb3[X];
	}
	ppuscroll=0,0;			//set position (0,0)
	oamaddr=0x00;			//transfer OAM data
	oamdma=HI(oambuffer);
	ppumask=0x1E;			//enable PPU
	ppustatus;			//acknowledgement
	ppuctrl=0xA8;			//enable NMI
}

g_refresh(){
	oamaddr=0x00;			//transfer OAM data
	oamdma=HI(oambuffer);
	ppuaddr=paletteBG2;		//set dynamic color
	if (state){
		ppudata=colorplaying;
	}else{
		ppudata=colornotplaying;
	}
	ppuaddr=paletteBG3;
	if (apustatus&0x10){
		ppudata=colordpcmkeyon;
	}else{
		ppudata=colordpcmkeyoff;
	}
	if (noisestate){
		ppudata=colornoisekeyon;
	}else{
		ppudata=colornoisekeyoff;
	}
	ppuaddr=dynamictranspose;	//print dynamic contents
	A=transpose;
	if (A>=0){
		ppudata=X='+';
		X=A;
	}else{
		ppudata=X='-';
		X=-A;
	}
	ppudata=dec2c1[X];
	ppudata=dec2c0[X];
	ppuaddr=dynamictempo;
	ppudata=tempo0;
	ppudata=tempo1;
	ppudata=tempo2;
	ppudata='.';
	ppudata=tempo3;
	ppudata=tempo4;
	ppuaddr=dynamicspeed;
	ppudata=speed0;
	ppudata=speed1;
	ppuaddr=dynamicnextsong;
	ppudata=hex2c[nextsong>>4];
	ppudata=hex2c[nextsong&0x0F];
	ppuaddr=dynamicsong;
	ppudata=song0;
	ppudata=song1;
	ppuaddr=dynamicrow;
	ppudata=hex2c[rownum1>>4];
	ppudata=hex2c[rownum1&0x0F];
	ppudata=hex2c[rownum0>>4];
	ppudata=hex2c[rownum0&0x0F];
	ppuaddr=dynamicmaxrow;
	ppudata=maxrow0;
	ppudata=maxrow1;
	ppudata=maxrow2;
	ppudata=maxrow3;
	ppuscroll=0,0;			//set position (0,0)
}

g_next(){
	Y=keyi;
	for (temp=X=0;(temp=X)<11;++temp){
		if (Y>=88){
			Y-=88;
		}
		A=keytri[temp]-transpose;
		if (A<144){
			X=A;
			oambuffer[Y++]=keyspy0[X];
			oambuffer[Y++]=keyspchar0[X];
			++Y;
			oambuffer[Y++]=keyspx[X];
			oambuffer[Y++]=keyspy1[X];
			++Y;
			++Y;
			oambuffer[Y++]=keyspx[X];
		}else{
			oambuffer[Y]=0xFF;
			Y+=4;
			oambuffer[Y]=0xFF;
			Y+=4;
		}
	}
	keyi=Y+64;
	sp63x=keyspx[basekey+transpose];
}

