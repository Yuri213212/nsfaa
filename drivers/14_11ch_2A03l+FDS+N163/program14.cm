	//[bank8]config
//@8000
extern dpcminst[0x100];
//@8100
extern mainpage[0x100];
//@8200
extern pageend[0x100];
//@8300
extern subpage[0x100];
//@8400
extern fxinitdata[0x80];
//@8480
extern fx1inittuning,fx2inittuning,fx3inittuning,fx4inittuning,fx5inittuning,fx6inittuning,fx7inittuning,fx8inittuning;
//@8490
extern inittempomul,inittempodiv,initloopindex,initloopaddr,initdelay,noiseinitvol,w64initvol,w64initmaster;
//@84C0
extern w64initdata[0x40];
////in 8500
//extern fxins[0x1f..0xff];
//extern fxinstuning[0x1e..0xfe];
//@8500
extern fxhifreq[0x80*2];	//alter, upper for +1oct tuning
//@8600
extern fxmidfreq[0x80*2];
//@8700
extern fxlofreq[0x80*2];
//@8800
extern w64hifreq[0x80];
//@8880
extern w64lofreq[0x80];
//@8900
extern initcallback();
	//[bankA]data sub
//@A000
extern scriptdata[0x100];
//@A100
extern noiseinsvol[0x100];
//@A200
extern w64insvol[0x100];
//@A800
extern fx1insvol[0x100];
//@A900
extern fx2insvol[0x100];
//@AA00
extern fx3insvol[0x100];
//@AB00
extern fx4insvol[0x100];
//@AC00
extern fx5insvol[0x100];
//@AD00
extern fx6insvol[0x100];
//@AE00
extern fx7insvol[0x100];
//@AF00
extern fx8insvol[0x100];
	//[bankB]data main
//@B000
extern dpcmnote[0x100];
//@B100
extern noisenote[0x100];
//@B200
extern w64note[0x100];
//@B800
extern fx1note[0x100];
//@B900
extern fx2note[0x100];
//@BA00
extern fx3note[0x100];
//@BB00
extern fx4note[0x100];
//@BC00
extern fx5note[0x100];
//@BD00
extern fx6note[0x100];
//@BE00
extern fx7note[0x100];
//@BF00
extern fx8note[0x100];
	//[bankD]sample
////@D000
//extern sample[0xff1];
//@DFFE
extern samplespeed,samplelength;

//@00
var1 state,count,tempomul,tempodiv,loopindex,loopaddr,pageindex,addr,maxaddr;
//@0E
var1 scriptlo,scripthi;
//@10
var1 fx1tuning,fx2tuning,fx3tuning,fx4tuning,fx5tuning,fx6tuning,fx7tuning,fx8tuning;

//@9011
_init_(A){
	goto init;
}//no return

scriptcaller(A){
	scriptlo=A;
	scripthi=A&0x0f|0x80;
	scriptlo&=0xf0;
	goto (scriptlo,scripthi);
}//no return

//@9031
_play_(){	//#begin time-critical mode
	if (!(A=state)) return;
	if (A<0){
		if (count){
			--count;
			return;
		}
		state=1;				//play ready
	}
	ifcs (count=A=count-tempomul) return;		//tempo adapter
	count=A+tempodiv;
	Y=addr;						//process pattern
	A=scriptdata[Y];				//[script] main=pointerlo(4),pointerhi(4);call $8HL0, null for do nothing
	if (A){
		scriptcaller();
	}
	X=dpcmnote[Y];					//[dpcm] main=dpcmindex(8);00:key-off,others hit:key-on,miss:do nothing
	if (!X){					//key-off
		st2a03=0x08;
	}else if (A=dpcminst[X]){			//key-on
		st2a03=X=0x08;
		bankD=A;
		dpcmdata=0x40;
		dpcmmode=samplespeed;
		dpcmlen=samplelength;
		st2a03=0x18;
	}
	A=noiseinsvol[Y]&0x0f;				//[noise] sub=-,-,-,-,vol(4);vol!=0:change vol
	if (A){
		noisevol=A|0x30;
	}
	A=noisenote[Y];					//[noise] main=short,control(3),period(4);control=000:key-on,control=111&period=E:key-off
	if (A==0xfe){					//key-off
		st2a03&=0x10;
		st2a03|=0x08;
	}else if (!(A&0x70)){				//key-on
		noiseperiod=A;
		noiselen=0x00;
	}

	A=w64insvol[Y]&0x3f;				//[w64] sub=-,-,vol(6);vol!=0:change vol
	if (A){
		w64mainvol=A&0x3f|0x80;
	}
	X=A=w64note[Y]&0x7f;				//[w64] main=-,oct(3),note(4);note<C:key-on,note=E:key-off
	if ((A&=0x0f)<0x0c){				//key-on
		w64mainhifreq=w64hifreq[X]|0x40;
		w64mainlofreq=w64lofreq[X];
	}else if (A==0x0e){				//key-off with phase reset
		w64mainhifreq=0xc0;
	}

	A=fx1insvol[Y]&0x0f;				//[fx] sub=ins(4),vol(4);vol!=0:change vol,ins!=0:change ins
	if (A){
		n163.fx1vol=A|0x70;
	}
	A=fx1insvol[Y]&0xf0;
	if (A){
		X=A|=0x0e;
		fx1tuning=fxhifreq[X];
		X|=0x0f;
		n163.fx1wave=fxhifreq[X];
	}
	NA=fx1hifreq;
	A=fx1note[Y];					//[fx] main=oct(3),~reset(1),note(4);note<C:key-on,note=E:key-off
	if ((A&=0x0f)<0x0c){				//key-on
		if (!((A=fx1note[Y])&0x10){		//phase reset
			ND=0xe4;
		}
		A&=0xef;
		X=A|fx1tuning;
		ND=fxhifreq[X];
		n163.fx1midfreq=fxmidfreq[X];
		n163.fx1lofreq=fxlofreq[X];
	}else if (A==0x0e){				//key-off
		ND=fx1tuning|0xe0;
		n163.fx1midfreq=0;
		n163.fx1lofreq=0;
	}

...//same for fx2~8

	A=++addr;					//address inc
	if (A&&A-maxaddr-1<0) return;			//<0:cc(lo)	//if (A&&A<=maxaddr) return;
	X=++pageindex;					//new page
}//no return

newpage(X){
	Y=0x00;
	if (!(A=mainpage[X])){				//end of pages
		X=loopindex;
		if (!(A=mainpage[X])){			//null pointer for no loop
			state=0;
			return;
		}
		Y=loopaddr;
	}
	pageindex=X;					//set page index
	bankB=A;					//switch bank main
	bankA=subpage[X];				//switch bank sub
	addr=Y;						//set start addr
	maxaddr=pageend[X];				//set max addr
}

init(A){
	push(A);
	st2a03=0x00;					//all key-off and reset data
	w64mainhifreq=0xc0;				//w64 key-off
	w64modhifreq=0x80;				//disable mod
	for (X=0x7f;X>=0;--X){
		n163.X=fxinitdata[X];
	}
	w64master=0x80;					//wave change begin
	for (X=0x3f;X>=0;--X){
		w64mainwave[X]=w64initdata[X];
	}
	w64master=w64initmaster&0x03;			//wave change end and set master
	dpcmdata=0x40;					//init dpcm data 0x40
	dpcmwave=0x40;					//dpcm start from $D000
	noisevol=noiseinitvol&0x0f|0x30;		//init noise vol
	st2a03=0x08;					//noise ready
	w64mainvol=w64initvol&0x3f|0x80;		//init w64 vol
	for (X=0x07;X>=0;--X){
		fx1tuning[X]=fx1inittuning[X]&0x10;	//init fx tuning
	}
	state=-1;					//play delay mode
	count=initdelay;				//init delay count
	tempomul=inittempomul;				//init tempo to 450*mul/div
	tempodiv=inittempodiv;
	loopindex=initloopindex;			//init looping state
	loopaddr=initloopaddr;
	X=0x00;
	pop(A);
	initcallback();					//init config override for multi songs
	//init zeropage const
	goto newpage;					//switch in first page
}//no return
